#!/usr/bin/env python3

import sys
import datetime
from pathlib import Path
import subprocess
import argparse


def upload_to_drive(local_path, remote_folder="yt-uploads"):
    remote_path = f"gdrive:{remote_folder}/{local_path.name}"
    print(f"‚òÅÔ∏è Uploading {local_path} ‚Üí {remote_path}")
    try:
        subprocess.run(
            ["rclone", "copy", str(local_path), remote_path, "--progress"], check=True
        )
        print("‚úÖ Upload complete.")
    except subprocess.CalledProcessError:
        print("‚ùå Upload failed.")


def download_videos(input_file, audio_only=False, upload=False):
    today = datetime.date.today().isoformat()
    home = Path.home()

    # Choose output directory based on mode
    base_dir = home / ("Music" if audio_only else "Videos") / today
    base_dir.mkdir(parents=True, exist_ok=True)

    # Read URLs from input
    if input_file == "-":
        try:
            urls = [line.strip() for line in sys.stdin if line.strip()]
        except KeyboardInterrupt as e:
            print("\nReceived Stop Signal... Exiting\n")
            sys.exit(0)
    else:
        try:
            with open(input_file, "r") as f:
                urls = [line.strip() for line in f if line.strip()]
        except FileNotFoundError:
            print(f"‚ùå Input file '{input_file}' not found.")
            sys.exit(1)

    if not urls:
        print("‚ö†Ô∏è No valid URLs found.")
        return

    for url in urls:
        print(f"üì• Downloading: {url}")
        if audio_only:
            command = [
                "yt-dlp",
                "-f",
                "bestaudio",
                "--extract-audio",
                "--audio-format",
                "mp3",
                "--audio-quality",
                "0",  # best
                "-o",
                str(base_dir / "%(title)s.%(ext)s"),
                url,
            ]
        else:
            command = [
                "yt-dlp",
                "-f",
                "bestvideo[height<=1080]+bestaudio/best[height<=1080]/best",
                "--recode-video",
                "mp4",
                "-o",
                str(base_dir / "%(title)s.%(ext)s"),
                url,
            ]

        try:
            subprocess.run(command, check=True)
        except subprocess.CalledProcessError:
            print(f"‚ùå Failed to download: {url}")

        if upload:
            print("Not Supported at this moment")
            # upload_to_drive(base_dir)


def main():
    parser = argparse.ArgumentParser(
        description="Download YouTube videos or MP3 audio."
    )
    #    parser.add_argument("-s", "--single", help="Download a single video")
    parser.add_argument(
        "input_file", help="Text file with YouTube URLs (or '-' to read from stdin)"
    )
    parser.add_argument(
        "--audio", action="store_true", help="Download audio only (as MP3)"
    )
    parser.add_argument(
        "--upload", action="store_true", help="Upload the folder to Google Drive"
    )
    args = parser.parse_args()

    download_videos(args.input_file, audio_only=args.audio, upload=args.upload)


if __name__ == "__main__":
    main()
